// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pvalue.proto

/*
Package pvalue is a generated protocol buffer package.

It is generated from these files:
	pvalue.proto

It has these top-level messages:
	ParameterValue
	ParameterStatus
	ParameterData
	TimeSeries
*/
package pvalue

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import yamcs "github.com/busoc/hadock/cmd/hdk2udp/internal/yamcs"
import mdb "github.com/busoc/hadock/cmd/hdk2udp/internal/mdb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// this can also be called validity status
type AcquisitionStatus int32

const (
	AcquisitionStatus_ACQUIRED     AcquisitionStatus = 0
	AcquisitionStatus_NOT_RECEIVED AcquisitionStatus = 1
	AcquisitionStatus_INVALID      AcquisitionStatus = 2
	AcquisitionStatus_EXPIRED      AcquisitionStatus = 3
)

var AcquisitionStatus_name = map[int32]string{
	0: "ACQUIRED",
	1: "NOT_RECEIVED",
	2: "INVALID",
	3: "EXPIRED",
}
var AcquisitionStatus_value = map[string]int32{
	"ACQUIRED":     0,
	"NOT_RECEIVED": 1,
	"INVALID":      2,
	"EXPIRED":      3,
}

func (x AcquisitionStatus) Enum() *AcquisitionStatus {
	p := new(AcquisitionStatus)
	*p = x
	return p
}
func (x AcquisitionStatus) String() string {
	return proto.EnumName(AcquisitionStatus_name, int32(x))
}
func (x *AcquisitionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcquisitionStatus_value, data, "AcquisitionStatus")
	if err != nil {
		return err
	}
	*x = AcquisitionStatus(value)
	return nil
}
func (AcquisitionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MonitoringResult int32

const (
	MonitoringResult_DISABLED  MonitoringResult = 0
	MonitoringResult_IN_LIMITS MonitoringResult = 1
	MonitoringResult_WATCH     MonitoringResult = 7
	MonitoringResult_WARNING   MonitoringResult = 10
	MonitoringResult_DISTRESS  MonitoringResult = 13
	MonitoringResult_CRITICAL  MonitoringResult = 16
	MonitoringResult_SEVERE    MonitoringResult = 19
)

var MonitoringResult_name = map[int32]string{
	0:  "DISABLED",
	1:  "IN_LIMITS",
	7:  "WATCH",
	10: "WARNING",
	13: "DISTRESS",
	16: "CRITICAL",
	19: "SEVERE",
}
var MonitoringResult_value = map[string]int32{
	"DISABLED":  0,
	"IN_LIMITS": 1,
	"WATCH":     7,
	"WARNING":   10,
	"DISTRESS":  13,
	"CRITICAL":  16,
	"SEVERE":    19,
}

func (x MonitoringResult) Enum() *MonitoringResult {
	p := new(MonitoringResult)
	*p = x
	return p
}
func (x MonitoringResult) String() string {
	return proto.EnumName(MonitoringResult_name, int32(x))
}
func (x *MonitoringResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MonitoringResult_value, data, "MonitoringResult")
	if err != nil {
		return err
	}
	*x = MonitoringResult(value)
	return nil
}
func (MonitoringResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RangeCondition int32

const (
	RangeCondition_LOW  RangeCondition = 0
	RangeCondition_HIGH RangeCondition = 1
)

var RangeCondition_name = map[int32]string{
	0: "LOW",
	1: "HIGH",
}
var RangeCondition_value = map[string]int32{
	"LOW":  0,
	"HIGH": 1,
}

func (x RangeCondition) Enum() *RangeCondition {
	p := new(RangeCondition)
	*p = x
	return p
}
func (x RangeCondition) String() string {
	return proto.EnumName(RangeCondition_name, int32(x))
}
func (x *RangeCondition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RangeCondition_value, data, "RangeCondition")
	if err != nil {
		return err
	}
	*x = RangeCondition(value)
	return nil
}
func (RangeCondition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// the difference between this and the com.spaceapplications.yamcs.ParameterValue is that
// this one contains a a parameter id (assigned at subscription time) instead of a Parameter (xtce def of a parameter)
type ParameterValue struct {
	Id                *yamcs.NamedObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RawValue          *yamcs.Value         `protobuf:"bytes,2,opt,name=rawValue" json:"rawValue,omitempty"`
	EngValue          *yamcs.Value         `protobuf:"bytes,3,opt,name=engValue" json:"engValue,omitempty"`
	AcquisitionTime   *int64               `protobuf:"varint,4,opt,name=acquisitionTime" json:"acquisitionTime,omitempty"`
	GenerationTime    *int64               `protobuf:"varint,5,opt,name=generationTime" json:"generationTime,omitempty"`
	AcquisitionStatus *AcquisitionStatus   `protobuf:"varint,6,opt,name=acquisitionStatus,enum=pvalue.AcquisitionStatus" json:"acquisitionStatus,omitempty"`
	ProcessingStatus  *bool                `protobuf:"varint,7,opt,name=processingStatus" json:"processingStatus,omitempty"`
	MonitoringResult  *MonitoringResult    `protobuf:"varint,8,opt,name=monitoringResult,enum=pvalue.MonitoringResult" json:"monitoringResult,omitempty"`
	RangeCondition    *RangeCondition      `protobuf:"varint,9,opt,name=rangeCondition,enum=pvalue.RangeCondition" json:"rangeCondition,omitempty"`
	// to be used as alternative to the ones above for clients that do not understand internal yamcs time encoding
	AcquisitionTimeUTC *string `protobuf:"bytes,11,opt,name=acquisitionTimeUTC" json:"acquisitionTimeUTC,omitempty"`
	GenerationTimeUTC  *string `protobuf:"bytes,12,opt,name=generationTimeUTC" json:"generationTimeUTC,omitempty"`
	// starting with Yamcs 3.3.0,  expirationTime is replaced by expireMillis below.
	// It used to be computed from the acquisitionTime; to emulate the old behaviour, simply do expirationTime = acquisitionTime+expireMillis.
	// However it might make more sensible to use the generation instead of the acquisition time (this is one reason for the change)
	ExpirationTime    *int64  `protobuf:"varint,23,opt,name=expirationTime" json:"expirationTime,omitempty"`
	ExpirationTimeUTC *string `protobuf:"bytes,24,opt,name=expirationTimeUTC" json:"expirationTimeUTC,omitempty"`
	// context-dependent ranges
	AlarmRange []*mdb.AlarmRange `protobuf:"bytes,25,rep,name=alarmRange" json:"alarmRange,omitempty"`
	// how long (in milliseconds) this parameter value is valid
	// Note that from Yamcs 3.3 there is an option when subscribing to parameters to get updated when the parameter values expire
	ExpireMillis     *int64 `protobuf:"varint,26,opt,name=expireMillis" json:"expireMillis,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ParameterValue) Reset()                    { *m = ParameterValue{} }
func (m *ParameterValue) String() string            { return proto.CompactTextString(m) }
func (*ParameterValue) ProtoMessage()               {}
func (*ParameterValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ParameterValue) GetId() *yamcs.NamedObjectId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ParameterValue) GetRawValue() *yamcs.Value {
	if m != nil {
		return m.RawValue
	}
	return nil
}

func (m *ParameterValue) GetEngValue() *yamcs.Value {
	if m != nil {
		return m.EngValue
	}
	return nil
}

func (m *ParameterValue) GetAcquisitionTime() int64 {
	if m != nil && m.AcquisitionTime != nil {
		return *m.AcquisitionTime
	}
	return 0
}

func (m *ParameterValue) GetGenerationTime() int64 {
	if m != nil && m.GenerationTime != nil {
		return *m.GenerationTime
	}
	return 0
}

func (m *ParameterValue) GetAcquisitionStatus() AcquisitionStatus {
	if m != nil && m.AcquisitionStatus != nil {
		return *m.AcquisitionStatus
	}
	return AcquisitionStatus_ACQUIRED
}

func (m *ParameterValue) GetProcessingStatus() bool {
	if m != nil && m.ProcessingStatus != nil {
		return *m.ProcessingStatus
	}
	return false
}

func (m *ParameterValue) GetMonitoringResult() MonitoringResult {
	if m != nil && m.MonitoringResult != nil {
		return *m.MonitoringResult
	}
	return MonitoringResult_DISABLED
}

func (m *ParameterValue) GetRangeCondition() RangeCondition {
	if m != nil && m.RangeCondition != nil {
		return *m.RangeCondition
	}
	return RangeCondition_LOW
}

func (m *ParameterValue) GetAcquisitionTimeUTC() string {
	if m != nil && m.AcquisitionTimeUTC != nil {
		return *m.AcquisitionTimeUTC
	}
	return ""
}

func (m *ParameterValue) GetGenerationTimeUTC() string {
	if m != nil && m.GenerationTimeUTC != nil {
		return *m.GenerationTimeUTC
	}
	return ""
}

func (m *ParameterValue) GetExpirationTime() int64 {
	if m != nil && m.ExpirationTime != nil {
		return *m.ExpirationTime
	}
	return 0
}

func (m *ParameterValue) GetExpirationTimeUTC() string {
	if m != nil && m.ExpirationTimeUTC != nil {
		return *m.ExpirationTimeUTC
	}
	return ""
}

func (m *ParameterValue) GetAlarmRange() []*mdb.AlarmRange {
	if m != nil {
		return m.AlarmRange
	}
	return nil
}

func (m *ParameterValue) GetExpireMillis() int64 {
	if m != nil && m.ExpireMillis != nil {
		return *m.ExpireMillis
	}
	return 0
}

// used in the ParameterArchive to store the status flags associated to one parameter value
type ParameterStatus struct {
	AcquisitionStatus *AcquisitionStatus `protobuf:"varint,1,opt,name=acquisitionStatus,enum=pvalue.AcquisitionStatus" json:"acquisitionStatus,omitempty"`
	MonitoringResult  *MonitoringResult  `protobuf:"varint,2,opt,name=monitoringResult,enum=pvalue.MonitoringResult" json:"monitoringResult,omitempty"`
	RangeCondition    *RangeCondition    `protobuf:"varint,3,opt,name=rangeCondition,enum=pvalue.RangeCondition" json:"rangeCondition,omitempty"`
	// context-dependent ranges
	AlarmRange []*mdb.AlarmRange `protobuf:"bytes,4,rep,name=alarmRange" json:"alarmRange,omitempty"`
	// when the value expires
	ExpireMillis     *int64 `protobuf:"varint,5,opt,name=expireMillis" json:"expireMillis,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ParameterStatus) Reset()                    { *m = ParameterStatus{} }
func (m *ParameterStatus) String() string            { return proto.CompactTextString(m) }
func (*ParameterStatus) ProtoMessage()               {}
func (*ParameterStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParameterStatus) GetAcquisitionStatus() AcquisitionStatus {
	if m != nil && m.AcquisitionStatus != nil {
		return *m.AcquisitionStatus
	}
	return AcquisitionStatus_ACQUIRED
}

func (m *ParameterStatus) GetMonitoringResult() MonitoringResult {
	if m != nil && m.MonitoringResult != nil {
		return *m.MonitoringResult
	}
	return MonitoringResult_DISABLED
}

func (m *ParameterStatus) GetRangeCondition() RangeCondition {
	if m != nil && m.RangeCondition != nil {
		return *m.RangeCondition
	}
	return RangeCondition_LOW
}

func (m *ParameterStatus) GetAlarmRange() []*mdb.AlarmRange {
	if m != nil {
		return m.AlarmRange
	}
	return nil
}

func (m *ParameterStatus) GetExpireMillis() int64 {
	if m != nil && m.ExpireMillis != nil {
		return *m.ExpireMillis
	}
	return 0
}

type ParameterData struct {
	Parameter []*ParameterValue `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	// the next three fields are used by the recorder as unique key to store parameters in "rows"
	// and also by the components that provide parameters from external sources
	// the time should roughly correspond to the parameter time but can be rounded for better efficiency
	Group            *string `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	GenerationTime   *int64  `protobuf:"varint,3,opt,name=generationTime" json:"generationTime,omitempty"`
	SeqNum           *int32  `protobuf:"varint,4,opt,name=seqNum" json:"seqNum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ParameterData) Reset()                    { *m = ParameterData{} }
func (m *ParameterData) String() string            { return proto.CompactTextString(m) }
func (*ParameterData) ProtoMessage()               {}
func (*ParameterData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParameterData) GetParameter() []*ParameterValue {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *ParameterData) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *ParameterData) GetGenerationTime() int64 {
	if m != nil && m.GenerationTime != nil {
		return *m.GenerationTime
	}
	return 0
}

func (m *ParameterData) GetSeqNum() int32 {
	if m != nil && m.SeqNum != nil {
		return *m.SeqNum
	}
	return 0
}

type TimeSeries struct {
	Sample           []*TimeSeries_Sample `protobuf:"bytes,1,rep,name=sample" json:"sample,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TimeSeries) GetSample() []*TimeSeries_Sample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type TimeSeries_Sample struct {
	Time             *string  `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Avg              *float64 `protobuf:"fixed64,2,opt,name=avg" json:"avg,omitempty"`
	Min              *float64 `protobuf:"fixed64,3,opt,name=min" json:"min,omitempty"`
	Max              *float64 `protobuf:"fixed64,4,opt,name=max" json:"max,omitempty"`
	N                *int32   `protobuf:"varint,5,opt,name=n" json:"n,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TimeSeries_Sample) Reset()                    { *m = TimeSeries_Sample{} }
func (m *TimeSeries_Sample) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries_Sample) ProtoMessage()               {}
func (*TimeSeries_Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *TimeSeries_Sample) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *TimeSeries_Sample) GetAvg() float64 {
	if m != nil && m.Avg != nil {
		return *m.Avg
	}
	return 0
}

func (m *TimeSeries_Sample) GetMin() float64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *TimeSeries_Sample) GetMax() float64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *TimeSeries_Sample) GetN() int32 {
	if m != nil && m.N != nil {
		return *m.N
	}
	return 0
}

func init() {
	proto.RegisterType((*ParameterValue)(nil), "pvalue.ParameterValue")
	proto.RegisterType((*ParameterStatus)(nil), "pvalue.ParameterStatus")
	proto.RegisterType((*ParameterData)(nil), "pvalue.ParameterData")
	proto.RegisterType((*TimeSeries)(nil), "pvalue.TimeSeries")
	proto.RegisterType((*TimeSeries_Sample)(nil), "pvalue.TimeSeries.Sample")
	proto.RegisterEnum("pvalue.AcquisitionStatus", AcquisitionStatus_name, AcquisitionStatus_value)
	proto.RegisterEnum("pvalue.MonitoringResult", MonitoringResult_name, MonitoringResult_value)
	proto.RegisterEnum("pvalue.RangeCondition", RangeCondition_name, RangeCondition_value)
}

func init() { proto.RegisterFile("pvalue.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x4e, 0xdb, 0x40,
	0x14, 0xad, 0xe3, 0xbc, 0x7c, 0xe3, 0x98, 0xc9, 0x14, 0x81, 0x89, 0xd4, 0x0a, 0x85, 0x4d, 0xcb,
	0xc2, 0x0b, 0xd4, 0x1f, 0x30, 0x8e, 0x45, 0x2c, 0x25, 0x86, 0xda, 0x26, 0x74, 0x87, 0x86, 0x64,
	0x6a, 0xb9, 0x8a, 0xed, 0xe0, 0x07, 0xa5, 0xcb, 0x4a, 0xfd, 0xd6, 0x7e, 0x47, 0x67, 0xc6, 0x21,
	0x25, 0x21, 0xea, 0x63, 0xe7, 0xb9, 0xe7, 0x9e, 0x73, 0xe7, 0x9c, 0xb9, 0x09, 0xa8, 0xcb, 0x07,
	0xb2, 0x28, 0xa9, 0xb1, 0xcc, 0xd2, 0x22, 0xc5, 0xcd, 0xea, 0xd4, 0xef, 0x7c, 0x23, 0xf1, 0x2c,
	0xaf, 0x8a, 0x7d, 0x25, 0x9e, 0xdf, 0x55, 0x9f, 0x83, 0x1f, 0x75, 0xd0, 0xae, 0x48, 0x46, 0x62,
	0x5a, 0xd0, 0x6c, 0xca, 0x5b, 0xf1, 0x31, 0xd4, 0xa2, 0xb9, 0x2e, 0x1d, 0x4b, 0xef, 0x3a, 0x67,
	0xfb, 0x46, 0xc5, 0x73, 0x59, 0xc3, 0xfc, 0xf2, 0xee, 0x0b, 0x9d, 0x15, 0xce, 0x1c, 0xbf, 0x85,
	0x76, 0x46, 0xbe, 0x8a, 0x6e, 0xbd, 0x26, 0xfa, 0xd4, 0x55, 0x5f, 0xa5, 0xc0, 0x70, 0x9a, 0x84,
	0x15, 0x2e, 0xef, 0xc0, 0x0f, 0x61, 0x8f, 0xcc, 0xee, 0xcb, 0x28, 0x8f, 0x8a, 0x28, 0x4d, 0x82,
	0x28, 0xa6, 0x7a, 0x9d, 0xb5, 0xc9, 0xf8, 0x00, 0xb4, 0x90, 0x26, 0x34, 0x23, 0xeb, 0x7a, 0x43,
	0xd4, 0x3f, 0x40, 0xef, 0x19, 0xc1, 0x2f, 0x48, 0x51, 0xe6, 0x7a, 0x93, 0x41, 0xda, 0xd9, 0x91,
	0xb1, 0xf2, 0x6b, 0x6e, 0x37, 0x60, 0x1d, 0x10, 0x33, 0x39, 0xa3, 0x79, 0x1e, 0x25, 0xe1, 0x8a,
	0xd4, 0x62, 0xa4, 0x36, 0x3e, 0x03, 0x14, 0xa7, 0x49, 0x54, 0xa4, 0x19, 0x43, 0x3c, 0x9a, 0x97,
	0x8b, 0x42, 0x6f, 0x0b, 0x39, 0xfd, 0x49, 0x6e, 0xb2, 0x85, 0x63, 0x03, 0xb4, 0x8c, 0x24, 0x21,
	0xb5, 0xd2, 0x64, 0x2e, 0xa6, 0xe8, 0x8a, 0x60, 0x1c, 0x3c, 0x31, 0xbc, 0x0d, 0x14, 0xf7, 0x01,
	0x6f, 0x99, 0xbc, 0x0e, 0x2c, 0xbd, 0xc3, 0x38, 0x0a, 0x3e, 0x82, 0xde, 0xa6, 0x4f, 0x0e, 0xa9,
	0x02, 0xea, 0x83, 0x46, 0x1f, 0x97, 0xd1, 0xb3, 0x08, 0x0e, 0x79, 0x04, 0xe7, 0x35, 0x5d, 0xc2,
	0x6f, 0xa0, 0xb7, 0x89, 0x71, 0x9a, 0xce, 0x69, 0x02, 0x3e, 0x01, 0x20, 0x0b, 0x92, 0xc5, 0xe2,
	0x22, 0xfa, 0xd1, 0xb1, 0xcc, 0x82, 0xdf, 0x33, 0xf8, 0x5b, 0x9b, 0xeb, 0x32, 0xde, 0x07, 0x55,
	0x68, 0xd0, 0x49, 0xb4, 0x58, 0x44, 0xb9, 0xde, 0xe7, 0xea, 0x83, 0x9f, 0x12, 0xec, 0xad, 0xd7,
	0x60, 0x15, 0xdf, 0xce, 0xd0, 0xa5, 0xbf, 0x85, 0xbe, 0x2b, 0xda, 0xda, 0x7f, 0x47, 0x2b, 0xff,
	0x31, 0xda, 0x4d, 0xa3, 0xf5, 0x7f, 0x33, 0x2a, 0x36, 0x69, 0x70, 0x0f, 0xdd, 0xb5, 0xcf, 0x21,
	0x29, 0x08, 0x7e, 0x0f, 0xca, 0xf2, 0xa9, 0xc0, 0xdc, 0x71, 0xa9, 0xf5, 0xd8, 0xad, 0x1f, 0x46,
	0x17, 0x1a, 0x61, 0x96, 0x96, 0x4b, 0xe1, 0x47, 0xd9, 0xb1, 0xac, 0xb2, 0x58, 0x56, 0x0d, 0x9a,
	0x39, 0xbd, 0x77, 0xcb, 0x58, 0x2c, 0x75, 0x63, 0xf0, 0x5d, 0x02, 0xe0, 0xb0, 0x4f, 0xb3, 0x88,
	0xe6, 0x6c, 0x60, 0x33, 0x27, 0xf1, 0x72, 0x41, 0x57, 0xd3, 0xd6, 0x59, 0xfe, 0xee, 0x31, 0x7c,
	0xd1, 0xd0, 0x1f, 0x41, 0xb3, 0xfa, 0xc2, 0x2a, 0xd4, 0x0b, 0x3e, 0x41, 0x12, 0x93, 0x3b, 0x20,
	0x93, 0x87, 0x50, 0x5c, 0x43, 0xe2, 0x87, 0x38, 0xaa, 0x12, 0xab, 0x0e, 0xe4, 0x51, 0x0c, 0x96,
	0xb0, 0x02, 0x52, 0x22, 0x6c, 0x37, 0x4e, 0x27, 0xd0, 0x7b, 0xf9, 0x54, 0x2a, 0xb4, 0x4d, 0xeb,
	0xe3, 0xb5, 0xe3, 0xd9, 0x43, 0xf4, 0x0a, 0x23, 0x50, 0xdd, 0xcb, 0xe0, 0xd6, 0xb3, 0x2d, 0xdb,
	0x99, 0xb2, 0x0a, 0x17, 0x6b, 0x39, 0xee, 0xd4, 0x1c, 0x3b, 0x43, 0x54, 0xe3, 0x07, 0xfb, 0xd3,
	0x95, 0xe8, 0x95, 0x4f, 0x53, 0x40, 0x2f, 0x1e, 0x91, 0xa9, 0x0d, 0x1d, 0xdf, 0x3c, 0x1f, 0x0b,
	0xb5, 0x2e, 0x28, 0x8e, 0x7b, 0x3b, 0x76, 0x26, 0x4e, 0xe0, 0x23, 0x7e, 0x95, 0xc6, 0x8d, 0x19,
	0x58, 0x23, 0xd4, 0xe2, 0x42, 0x37, 0xa6, 0xe7, 0x3a, 0xee, 0x05, 0x82, 0x15, 0x29, 0xf0, 0x6c,
	0xdf, 0x47, 0x5d, 0x7e, 0xb2, 0x3c, 0x27, 0x70, 0x2c, 0x73, 0x8c, 0x10, 0x06, 0xe6, 0xde, 0x9e,
	0xda, 0x9e, 0x8d, 0x5e, 0x9f, 0x9e, 0x80, 0xb6, 0xb5, 0x03, 0x2d, 0x90, 0xc7, 0x97, 0x37, 0x6c,
	0x52, 0x1b, 0xea, 0x23, 0xe7, 0x62, 0x84, 0xa4, 0xf3, 0x7d, 0xc0, 0x69, 0x16, 0x1a, 0xcf, 0xfe,
	0xe9, 0xee, 0xca, 0xcf, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x0a, 0x24, 0xde, 0x10, 0x05,
	0x00, 0x00,
}
