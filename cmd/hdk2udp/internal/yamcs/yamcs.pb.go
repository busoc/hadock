// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yamcs.proto

/*
Package yamcs is a generated protocol buffer package.

It is generated from these files:
	yamcs.proto

It has these top-level messages:
	StringMessage
	Instant
	MessagingAddress
	Value
	NamedObjectId
	NamedObjectList
	IndexRequest
	ArchiveRecord
	IndexResult
	TagRequest
	ArchiveTag
	TagResult
	UpsertTagRequest
	DeleteTagRequest
	ReplaySpeed
	ReplayRequest
	ParameterReplayRequest
	PacketReplayRequest
	EventReplayRequest
	CommandHistoryReplayRequest
	PpReplayRequest
	ReplayStatus
	TmPacketData
	TimeInfo
	Event
*/
package yamcs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *********************** Replays ***************
type EndAction int32

const (
	EndAction_LOOP EndAction = 1
	EndAction_QUIT EndAction = 2
	EndAction_STOP EndAction = 3
)

var EndAction_name = map[int32]string{
	1: "LOOP",
	2: "QUIT",
	3: "STOP",
}
var EndAction_value = map[string]int32{
	"LOOP": 1,
	"QUIT": 2,
	"STOP": 3,
}

func (x EndAction) Enum() *EndAction {
	p := new(EndAction)
	*p = x
	return p
}
func (x EndAction) String() string {
	return proto.EnumName(EndAction_name, int32(x))
}
func (x *EndAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EndAction_value, data, "EndAction")
	if err != nil {
		return err
	}
	*x = EndAction(value)
	return nil
}
func (EndAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Integers from this enum are sent as values of the $Protocol.DATA_TYPE_HEADER_NAME to the hornetq messages containing replay data
// the first two are not data but status information and perhaps should be moved to a different field
type ProtoDataType int32

const (
	// error in replay
	ProtoDataType_DT_ERROR ProtoDataType = 1
	// the replay status has changed (e.g.  stopped or closed) the body contains a ReplayStatus
	ProtoDataType_STATE_CHANGE          ProtoDataType = 2
	ProtoDataType_TM_PACKET             ProtoDataType = 3
	ProtoDataType_PP                    ProtoDataType = 4
	ProtoDataType_EVENT                 ProtoDataType = 5
	ProtoDataType_ARCHIVE_INDEX         ProtoDataType = 6
	ProtoDataType_ARCHIVE_TAG           ProtoDataType = 7
	ProtoDataType_PARAMETER             ProtoDataType = 8
	ProtoDataType_CMD_HISTORY           ProtoDataType = 9
	ProtoDataType_PROCESSOR_INFO        ProtoDataType = 10
	ProtoDataType_CLIENT_INFO           ProtoDataType = 11
	ProtoDataType_PROCESSING_STATISTICS ProtoDataType = 12
	ProtoDataType_STREAM_DATA           ProtoDataType = 13
	ProtoDataType_ALARM_DATA            ProtoDataType = 14
	ProtoDataType_TIME_INFO             ProtoDataType = 15
	ProtoDataType_LINK_EVENT            ProtoDataType = 16
	ProtoDataType_COMMAND_QUEUE_INFO    ProtoDataType = 17
	ProtoDataType_COMMAND_QUEUE_EVENT   ProtoDataType = 18
	ProtoDataType_EXTENSION_DATA        ProtoDataType = 100
)

var ProtoDataType_name = map[int32]string{
	1:   "DT_ERROR",
	2:   "STATE_CHANGE",
	3:   "TM_PACKET",
	4:   "PP",
	5:   "EVENT",
	6:   "ARCHIVE_INDEX",
	7:   "ARCHIVE_TAG",
	8:   "PARAMETER",
	9:   "CMD_HISTORY",
	10:  "PROCESSOR_INFO",
	11:  "CLIENT_INFO",
	12:  "PROCESSING_STATISTICS",
	13:  "STREAM_DATA",
	14:  "ALARM_DATA",
	15:  "TIME_INFO",
	16:  "LINK_EVENT",
	17:  "COMMAND_QUEUE_INFO",
	18:  "COMMAND_QUEUE_EVENT",
	100: "EXTENSION_DATA",
}
var ProtoDataType_value = map[string]int32{
	"DT_ERROR":              1,
	"STATE_CHANGE":          2,
	"TM_PACKET":             3,
	"PP":                    4,
	"EVENT":                 5,
	"ARCHIVE_INDEX":         6,
	"ARCHIVE_TAG":           7,
	"PARAMETER":             8,
	"CMD_HISTORY":           9,
	"PROCESSOR_INFO":        10,
	"CLIENT_INFO":           11,
	"PROCESSING_STATISTICS": 12,
	"STREAM_DATA":           13,
	"ALARM_DATA":            14,
	"TIME_INFO":             15,
	"LINK_EVENT":            16,
	"COMMAND_QUEUE_INFO":    17,
	"COMMAND_QUEUE_EVENT":   18,
	"EXTENSION_DATA":        100,
}

func (x ProtoDataType) Enum() *ProtoDataType {
	p := new(ProtoDataType)
	*p = x
	return p
}
func (x ProtoDataType) String() string {
	return proto.EnumName(ProtoDataType_name, int32(x))
}
func (x *ProtoDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtoDataType_value, data, "ProtoDataType")
	if err != nil {
		return err
	}
	*x = ProtoDataType(value)
	return nil
}
func (ProtoDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Value_Type int32

const (
	Value_FLOAT     Value_Type = 0
	Value_DOUBLE    Value_Type = 1
	Value_UINT32    Value_Type = 2
	Value_SINT32    Value_Type = 3
	Value_BINARY    Value_Type = 4
	Value_STRING    Value_Type = 5
	Value_TIMESTAMP Value_Type = 6
	Value_UINT64    Value_Type = 7
	Value_SINT64    Value_Type = 8
	Value_BOOLEAN   Value_Type = 9
)

var Value_Type_name = map[int32]string{
	0: "FLOAT",
	1: "DOUBLE",
	2: "UINT32",
	3: "SINT32",
	4: "BINARY",
	5: "STRING",
	6: "TIMESTAMP",
	7: "UINT64",
	8: "SINT64",
	9: "BOOLEAN",
}
var Value_Type_value = map[string]int32{
	"FLOAT":     0,
	"DOUBLE":    1,
	"UINT32":    2,
	"SINT32":    3,
	"BINARY":    4,
	"STRING":    5,
	"TIMESTAMP": 6,
	"UINT64":    7,
	"SINT64":    8,
	"BOOLEAN":   9,
}

func (x Value_Type) Enum() *Value_Type {
	p := new(Value_Type)
	*p = x
	return p
}
func (x Value_Type) String() string {
	return proto.EnumName(Value_Type_name, int32(x))
}
func (x *Value_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Value_Type_value, data, "Value_Type")
	if err != nil {
		return err
	}
	*x = Value_Type(value)
	return nil
}
func (Value_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ReplaySpeed_ReplaySpeedType int32

const (
	ReplaySpeed_AFAP        ReplaySpeed_ReplaySpeedType = 1
	ReplaySpeed_FIXED_DELAY ReplaySpeed_ReplaySpeedType = 2
	ReplaySpeed_REALTIME    ReplaySpeed_ReplaySpeedType = 3
)

var ReplaySpeed_ReplaySpeedType_name = map[int32]string{
	1: "AFAP",
	2: "FIXED_DELAY",
	3: "REALTIME",
}
var ReplaySpeed_ReplaySpeedType_value = map[string]int32{
	"AFAP":        1,
	"FIXED_DELAY": 2,
	"REALTIME":    3,
}

func (x ReplaySpeed_ReplaySpeedType) Enum() *ReplaySpeed_ReplaySpeedType {
	p := new(ReplaySpeed_ReplaySpeedType)
	*p = x
	return p
}
func (x ReplaySpeed_ReplaySpeedType) String() string {
	return proto.EnumName(ReplaySpeed_ReplaySpeedType_name, int32(x))
}
func (x *ReplaySpeed_ReplaySpeedType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplaySpeed_ReplaySpeedType_value, data, "ReplaySpeed_ReplaySpeedType")
	if err != nil {
		return err
	}
	*x = ReplaySpeed_ReplaySpeedType(value)
	return nil
}
func (ReplaySpeed_ReplaySpeedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

type ReplayStatus_ReplayState int32

const (
	ReplayStatus_INITIALIZATION ReplayStatus_ReplayState = 0
	ReplayStatus_RUNNING        ReplayStatus_ReplayState = 1
	ReplayStatus_STOPPED        ReplayStatus_ReplayState = 2
	ReplayStatus_ERROR          ReplayStatus_ReplayState = 3
	ReplayStatus_PAUSED         ReplayStatus_ReplayState = 4
	ReplayStatus_CLOSED         ReplayStatus_ReplayState = 5
)

var ReplayStatus_ReplayState_name = map[int32]string{
	0: "INITIALIZATION",
	1: "RUNNING",
	2: "STOPPED",
	3: "ERROR",
	4: "PAUSED",
	5: "CLOSED",
}
var ReplayStatus_ReplayState_value = map[string]int32{
	"INITIALIZATION": 0,
	"RUNNING":        1,
	"STOPPED":        2,
	"ERROR":          3,
	"PAUSED":         4,
	"CLOSED":         5,
}

func (x ReplayStatus_ReplayState) Enum() *ReplayStatus_ReplayState {
	p := new(ReplayStatus_ReplayState)
	*p = x
	return p
}
func (x ReplayStatus_ReplayState) String() string {
	return proto.EnumName(ReplayStatus_ReplayState_name, int32(x))
}
func (x *ReplayStatus_ReplayState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplayStatus_ReplayState_value, data, "ReplayStatus_ReplayState")
	if err != nil {
		return err
	}
	*x = ReplayStatus_ReplayState(value)
	return nil
}
func (ReplayStatus_ReplayState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

type Event_EventSeverity int32

const (
	Event_INFO    Event_EventSeverity = 0
	Event_WARNING Event_EventSeverity = 1
	Event_ERROR   Event_EventSeverity = 2
)

var Event_EventSeverity_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
}
var Event_EventSeverity_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x Event_EventSeverity) Enum() *Event_EventSeverity {
	p := new(Event_EventSeverity)
	*p = x
	return p
}
func (x Event_EventSeverity) String() string {
	return proto.EnumName(Event_EventSeverity_name, int32(x))
}
func (x *Event_EventSeverity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_EventSeverity_value, data, "Event_EventSeverity")
	if err != nil {
		return err
	}
	*x = Event_EventSeverity(value)
	return nil
}
func (Event_EventSeverity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

type StringMessage struct {
	Message          *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StringMessage) Reset()                    { *m = StringMessage{} }
func (m *StringMessage) String() string            { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()               {}
func (*StringMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StringMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Instant struct {
	Instant          *int64 `protobuf:"varint,1,req,name=instant" json:"instant,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Instant) Reset()                    { *m = Instant{} }
func (m *Instant) String() string            { return proto.CompactTextString(m) }
func (*Instant) ProtoMessage()               {}
func (*Instant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Instant) GetInstant() int64 {
	if m != nil && m.Instant != nil {
		return *m.Instant
	}
	return 0
}

type MessagingAddress struct {
	Address          *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessagingAddress) Reset()                    { *m = MessagingAddress{} }
func (m *MessagingAddress) String() string            { return proto.CompactTextString(m) }
func (*MessagingAddress) ProtoMessage()               {}
func (*MessagingAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MessagingAddress) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// union type for storing a value
type Value struct {
	Type             *Value_Type `protobuf:"varint,1,req,name=type,enum=yamcs.Value_Type" json:"type,omitempty"`
	FloatValue       *float32    `protobuf:"fixed32,2,opt,name=floatValue" json:"floatValue,omitempty"`
	DoubleValue      *float64    `protobuf:"fixed64,3,opt,name=doubleValue" json:"doubleValue,omitempty"`
	Sint32Value      *int32      `protobuf:"zigzag32,4,opt,name=sint32Value" json:"sint32Value,omitempty"`
	Uint32Value      *uint32     `protobuf:"varint,5,opt,name=uint32Value" json:"uint32Value,omitempty"`
	BinaryValue      []byte      `protobuf:"bytes,6,opt,name=binaryValue" json:"binaryValue,omitempty"`
	StringValue      *string     `protobuf:"bytes,7,opt,name=stringValue" json:"stringValue,omitempty"`
	TimestampValue   *int64      `protobuf:"varint,8,opt,name=timestampValue" json:"timestampValue,omitempty"`
	Uint64Value      *uint64     `protobuf:"varint,9,opt,name=uint64Value" json:"uint64Value,omitempty"`
	Sint64Value      *int64      `protobuf:"zigzag64,10,opt,name=sint64Value" json:"sint64Value,omitempty"`
	BooleanValue     *bool       `protobuf:"varint,11,opt,name=booleanValue" json:"booleanValue,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Value) GetType() Value_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Value_FLOAT
}

func (m *Value) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Value) GetSint32Value() int32 {
	if m != nil && m.Sint32Value != nil {
		return *m.Sint32Value
	}
	return 0
}

func (m *Value) GetUint32Value() uint32 {
	if m != nil && m.Uint32Value != nil {
		return *m.Uint32Value
	}
	return 0
}

func (m *Value) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

func (m *Value) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Value) GetTimestampValue() int64 {
	if m != nil && m.TimestampValue != nil {
		return *m.TimestampValue
	}
	return 0
}

func (m *Value) GetUint64Value() uint64 {
	if m != nil && m.Uint64Value != nil {
		return *m.Uint64Value
	}
	return 0
}

func (m *Value) GetSint64Value() int64 {
	if m != nil && m.Sint64Value != nil {
		return *m.Sint64Value
	}
	return 0
}

func (m *Value) GetBooleanValue() bool {
	if m != nil && m.BooleanValue != nil {
		return *m.BooleanValue
	}
	return false
}

// this is used by external clients to identify a parameter or a container (e.g. when subscribing to it)
// if namespace is set, then the corresponding alias is looked up
type NamedObjectId struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Namespace        *string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NamedObjectId) Reset()                    { *m = NamedObjectId{} }
func (m *NamedObjectId) String() string            { return proto.CompactTextString(m) }
func (*NamedObjectId) ProtoMessage()               {}
func (*NamedObjectId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NamedObjectId) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NamedObjectId) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

type NamedObjectList struct {
	List             []*NamedObjectId `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *NamedObjectList) Reset()                    { *m = NamedObjectList{} }
func (m *NamedObjectList) String() string            { return proto.CompactTextString(m) }
func (*NamedObjectList) ProtoMessage()               {}
func (*NamedObjectList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NamedObjectList) GetList() []*NamedObjectId {
	if m != nil {
		return m.List
	}
	return nil
}

// requesting index (histogram) information about tm packets, pp groups and commands
type IndexRequest struct {
	Instance *string `protobuf:"bytes,1,req,name=instance" json:"instance,omitempty"`
	Start    *int64  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	Stop     *int64  `protobuf:"varint,3,opt,name=stop" json:"stop,omitempty"`
	// alternative time specification: ISO 8061 time of shape 2012-11-03T07:36:33.323 (no timezone!)
	UtcStart *string `protobuf:"bytes,14,opt,name=utcStart" json:"utcStart,omitempty"`
	UtcStop  *string `protobuf:"bytes,15,opt,name=utcStop" json:"utcStop,omitempty"`
	// namespace to use when sending all tm, pp or cmd (when using a filter, the namespace specified in the filter will be used)
	// if not specified, the fully qualified canonical names will be sent
	DefaultNamespace *string `protobuf:"bytes,4,opt,name=defaultNamespace" json:"defaultNamespace,omitempty"`
	// if sendAllTm is true, then all tm packets are sent, otherwise those in the tmPacket list (which can be empty)
	SendAllTm *bool            `protobuf:"varint,5,opt,name=sendAllTm,def=0" json:"sendAllTm,omitempty"`
	TmPacket  []*NamedObjectId `protobuf:"bytes,6,rep,name=tmPacket" json:"tmPacket,omitempty"`
	// if sendAllPp is true, then all PP groups are sent, otherwise those in the ppGroup list (which can be empty)
	SendAllPp             *bool            `protobuf:"varint,7,opt,name=sendAllPp,def=0" json:"sendAllPp,omitempty"`
	PpGroup               []*NamedObjectId `protobuf:"bytes,8,rep,name=ppGroup" json:"ppGroup,omitempty"`
	SendCompletenessIndex *bool            `protobuf:"varint,9,opt,name=sendCompletenessIndex,def=0" json:"sendCompletenessIndex,omitempty"`
	// if sendAllCmd is true, then all command names  are sent, otherwise those in the cmdName list (which can be empty)
	SendAllCmd *bool            `protobuf:"varint,10,opt,name=sendAllCmd,def=0" json:"sendAllCmd,omitempty"`
	CmdName    []*NamedObjectId `protobuf:"bytes,11,rep,name=cmdName" json:"cmdName,omitempty"`
	// if sendAllEvent is true, then all events are sent, otherwise those in the eventSource list (which can be empty)
	SendAllEvent     *bool            `protobuf:"varint,12,opt,name=sendAllEvent,def=0" json:"sendAllEvent,omitempty"`
	EventSource      []*NamedObjectId `protobuf:"bytes,13,rep,name=eventSource" json:"eventSource,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *IndexRequest) Reset()                    { *m = IndexRequest{} }
func (m *IndexRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()               {}
func (*IndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_IndexRequest_SendAllTm bool = false
const Default_IndexRequest_SendAllPp bool = false
const Default_IndexRequest_SendCompletenessIndex bool = false
const Default_IndexRequest_SendAllCmd bool = false
const Default_IndexRequest_SendAllEvent bool = false

func (m *IndexRequest) GetInstance() string {
	if m != nil && m.Instance != nil {
		return *m.Instance
	}
	return ""
}

func (m *IndexRequest) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *IndexRequest) GetStop() int64 {
	if m != nil && m.Stop != nil {
		return *m.Stop
	}
	return 0
}

func (m *IndexRequest) GetUtcStart() string {
	if m != nil && m.UtcStart != nil {
		return *m.UtcStart
	}
	return ""
}

func (m *IndexRequest) GetUtcStop() string {
	if m != nil && m.UtcStop != nil {
		return *m.UtcStop
	}
	return ""
}

func (m *IndexRequest) GetDefaultNamespace() string {
	if m != nil && m.DefaultNamespace != nil {
		return *m.DefaultNamespace
	}
	return ""
}

func (m *IndexRequest) GetSendAllTm() bool {
	if m != nil && m.SendAllTm != nil {
		return *m.SendAllTm
	}
	return Default_IndexRequest_SendAllTm
}

func (m *IndexRequest) GetTmPacket() []*NamedObjectId {
	if m != nil {
		return m.TmPacket
	}
	return nil
}

func (m *IndexRequest) GetSendAllPp() bool {
	if m != nil && m.SendAllPp != nil {
		return *m.SendAllPp
	}
	return Default_IndexRequest_SendAllPp
}

func (m *IndexRequest) GetPpGroup() []*NamedObjectId {
	if m != nil {
		return m.PpGroup
	}
	return nil
}

func (m *IndexRequest) GetSendCompletenessIndex() bool {
	if m != nil && m.SendCompletenessIndex != nil {
		return *m.SendCompletenessIndex
	}
	return Default_IndexRequest_SendCompletenessIndex
}

func (m *IndexRequest) GetSendAllCmd() bool {
	if m != nil && m.SendAllCmd != nil {
		return *m.SendAllCmd
	}
	return Default_IndexRequest_SendAllCmd
}

func (m *IndexRequest) GetCmdName() []*NamedObjectId {
	if m != nil {
		return m.CmdName
	}
	return nil
}

func (m *IndexRequest) GetSendAllEvent() bool {
	if m != nil && m.SendAllEvent != nil {
		return *m.SendAllEvent
	}
	return Default_IndexRequest_SendAllEvent
}

func (m *IndexRequest) GetEventSource() []*NamedObjectId {
	if m != nil {
		return m.EventSource
	}
	return nil
}

// contains histogram data
type ArchiveRecord struct {
	Id               *NamedObjectId `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	First            *int64         `protobuf:"varint,2,req,name=first" json:"first,omitempty"`
	Last             *int64         `protobuf:"varint,3,req,name=last" json:"last,omitempty"`
	Num              *int32         `protobuf:"varint,4,req,name=num" json:"num,omitempty"`
	Info             *string        `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ArchiveRecord) Reset()                    { *m = ArchiveRecord{} }
func (m *ArchiveRecord) String() string            { return proto.CompactTextString(m) }
func (*ArchiveRecord) ProtoMessage()               {}
func (*ArchiveRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ArchiveRecord) GetId() *NamedObjectId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ArchiveRecord) GetFirst() int64 {
	if m != nil && m.First != nil {
		return *m.First
	}
	return 0
}

func (m *ArchiveRecord) GetLast() int64 {
	if m != nil && m.Last != nil {
		return *m.Last
	}
	return 0
}

func (m *ArchiveRecord) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *ArchiveRecord) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

type IndexResult struct {
	Instance *string          `protobuf:"bytes,1,req,name=instance" json:"instance,omitempty"`
	Records  []*ArchiveRecord `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
	// type can be histogram or completenss
	Type *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// if type=histogram, the tableName is the table for which the histogram is sent
	TableName        *string `protobuf:"bytes,4,opt,name=tableName" json:"tableName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IndexResult) Reset()                    { *m = IndexResult{} }
func (m *IndexResult) String() string            { return proto.CompactTextString(m) }
func (*IndexResult) ProtoMessage()               {}
func (*IndexResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IndexResult) GetInstance() string {
	if m != nil && m.Instance != nil {
		return *m.Instance
	}
	return ""
}

func (m *IndexResult) GetRecords() []*ArchiveRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *IndexResult) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *IndexResult) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

type TagRequest struct {
	Instance         *string `protobuf:"bytes,1,req,name=instance" json:"instance,omitempty"`
	Start            *int64  `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	Stop             *int64  `protobuf:"varint,3,opt,name=stop" json:"stop,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TagRequest) GetInstance() string {
	if m != nil && m.Instance != nil {
		return *m.Instance
	}
	return ""
}

func (m *TagRequest) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *TagRequest) GetStop() int64 {
	if m != nil && m.Stop != nil {
		return *m.Stop
	}
	return 0
}

type ArchiveTag struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Start            *int64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	Stop             *int64  `protobuf:"varint,4,opt,name=stop" json:"stop,omitempty"`
	Description      *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Color            *string `protobuf:"bytes,6,opt,name=color" json:"color,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ArchiveTag) Reset()                    { *m = ArchiveTag{} }
func (m *ArchiveTag) String() string            { return proto.CompactTextString(m) }
func (*ArchiveTag) ProtoMessage()               {}
func (*ArchiveTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ArchiveTag) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArchiveTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ArchiveTag) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *ArchiveTag) GetStop() int64 {
	if m != nil && m.Stop != nil {
		return *m.Stop
	}
	return 0
}

func (m *ArchiveTag) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ArchiveTag) GetColor() string {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return ""
}

type TagResult struct {
	Instance         *string       `protobuf:"bytes,1,req,name=instance" json:"instance,omitempty"`
	Tag              []*ArchiveTag `protobuf:"bytes,2,rep,name=tag" json:"tag,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TagResult) Reset()                    { *m = TagResult{} }
func (m *TagResult) String() string            { return proto.CompactTextString(m) }
func (*TagResult) ProtoMessage()               {}
func (*TagResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TagResult) GetInstance() string {
	if m != nil && m.Instance != nil {
		return *m.Instance
	}
	return ""
}

func (m *TagResult) GetTag() []*ArchiveTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

// insert (if no oldTag) or update tag
type UpsertTagRequest struct {
	OldTag           *ArchiveTag `protobuf:"bytes,1,opt,name=oldTag" json:"oldTag,omitempty"`
	NewTag           *ArchiveTag `protobuf:"bytes,2,req,name=newTag" json:"newTag,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *UpsertTagRequest) Reset()                    { *m = UpsertTagRequest{} }
func (m *UpsertTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertTagRequest) ProtoMessage()               {}
func (*UpsertTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpsertTagRequest) GetOldTag() *ArchiveTag {
	if m != nil {
		return m.OldTag
	}
	return nil
}

func (m *UpsertTagRequest) GetNewTag() *ArchiveTag {
	if m != nil {
		return m.NewTag
	}
	return nil
}

type DeleteTagRequest struct {
	Tag              *ArchiveTag `protobuf:"bytes,3,req,name=tag" json:"tag,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *DeleteTagRequest) Reset()                    { *m = DeleteTagRequest{} }
func (m *DeleteTagRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTagRequest) ProtoMessage()               {}
func (*DeleteTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteTagRequest) GetTag() *ArchiveTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type ReplaySpeed struct {
	Type             *ReplaySpeed_ReplaySpeedType `protobuf:"varint,1,req,name=type,enum=yamcs.ReplaySpeed_ReplaySpeedType" json:"type,omitempty"`
	Param            *float32                     `protobuf:"fixed32,2,opt,name=param" json:"param,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *ReplaySpeed) Reset()                    { *m = ReplaySpeed{} }
func (m *ReplaySpeed) String() string            { return proto.CompactTextString(m) }
func (*ReplaySpeed) ProtoMessage()               {}
func (*ReplaySpeed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReplaySpeed) GetType() ReplaySpeed_ReplaySpeedType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ReplaySpeed_AFAP
}

func (m *ReplaySpeed) GetParam() float32 {
	if m != nil && m.Param != nil {
		return *m.Param
	}
	return 0
}

// used to replay (concurrently) TM packets, parameters and events
type ReplayRequest struct {
	// time specification
	Start *int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Stop  *int64 `protobuf:"varint,2,opt,name=stop" json:"stop,omitempty"`
	// alternative time specification: ISO 8061 time of shape 2012-11-03T07:36:33.323 (no timezone!)
	UtcStart *string `protobuf:"bytes,13,opt,name=utcStart" json:"utcStart,omitempty"`
	UtcStop  *string `protobuf:"bytes,14,opt,name=utcStop" json:"utcStop,omitempty"`
	// what should happen at the end of the replay
	EndAction *EndAction `protobuf:"varint,3,opt,name=endAction,enum=yamcs.EndAction,def=2" json:"endAction,omitempty"`
	// how fast the replay should go
	Speed *ReplaySpeed `protobuf:"bytes,4,opt,name=speed" json:"speed,omitempty"`
	// Reverse the direction of the replay
	Reverse *bool `protobuf:"varint,15,opt,name=reverse" json:"reverse,omitempty"`
	// At least one of the following request types should be added
	ParameterRequest      *ParameterReplayRequest      `protobuf:"bytes,8,opt,name=parameterRequest" json:"parameterRequest,omitempty"`
	PacketRequest         *PacketReplayRequest         `protobuf:"bytes,9,opt,name=packetRequest" json:"packetRequest,omitempty"`
	EventRequest          *EventReplayRequest          `protobuf:"bytes,10,opt,name=eventRequest" json:"eventRequest,omitempty"`
	CommandHistoryRequest *CommandHistoryReplayRequest `protobuf:"bytes,11,opt,name=commandHistoryRequest" json:"commandHistoryRequest,omitempty"`
	PpRequest             *PpReplayRequest             `protobuf:"bytes,12,opt,name=ppRequest" json:"ppRequest,omitempty"`
	XXX_unrecognized      []byte                       `json:"-"`
}

func (m *ReplayRequest) Reset()                    { *m = ReplayRequest{} }
func (m *ReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplayRequest) ProtoMessage()               {}
func (*ReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

const Default_ReplayRequest_EndAction EndAction = EndAction_QUIT

func (m *ReplayRequest) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *ReplayRequest) GetStop() int64 {
	if m != nil && m.Stop != nil {
		return *m.Stop
	}
	return 0
}

func (m *ReplayRequest) GetUtcStart() string {
	if m != nil && m.UtcStart != nil {
		return *m.UtcStart
	}
	return ""
}

func (m *ReplayRequest) GetUtcStop() string {
	if m != nil && m.UtcStop != nil {
		return *m.UtcStop
	}
	return ""
}

func (m *ReplayRequest) GetEndAction() EndAction {
	if m != nil && m.EndAction != nil {
		return *m.EndAction
	}
	return Default_ReplayRequest_EndAction
}

func (m *ReplayRequest) GetSpeed() *ReplaySpeed {
	if m != nil {
		return m.Speed
	}
	return nil
}

func (m *ReplayRequest) GetReverse() bool {
	if m != nil && m.Reverse != nil {
		return *m.Reverse
	}
	return false
}

func (m *ReplayRequest) GetParameterRequest() *ParameterReplayRequest {
	if m != nil {
		return m.ParameterRequest
	}
	return nil
}

func (m *ReplayRequest) GetPacketRequest() *PacketReplayRequest {
	if m != nil {
		return m.PacketRequest
	}
	return nil
}

func (m *ReplayRequest) GetEventRequest() *EventReplayRequest {
	if m != nil {
		return m.EventRequest
	}
	return nil
}

func (m *ReplayRequest) GetCommandHistoryRequest() *CommandHistoryReplayRequest {
	if m != nil {
		return m.CommandHistoryRequest
	}
	return nil
}

func (m *ReplayRequest) GetPpRequest() *PpReplayRequest {
	if m != nil {
		return m.PpRequest
	}
	return nil
}

type ParameterReplayRequest struct {
	NameFilter        []*NamedObjectId `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"`
	SendRaw           *bool            `protobuf:"varint,2,opt,name=sendRaw,def=0" json:"sendRaw,omitempty"`
	PerformMonitoring *bool            `protobuf:"varint,3,opt,name=performMonitoring,def=0" json:"performMonitoring,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *ParameterReplayRequest) Reset()                    { *m = ParameterReplayRequest{} }
func (m *ParameterReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*ParameterReplayRequest) ProtoMessage()               {}
func (*ParameterReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

const Default_ParameterReplayRequest_SendRaw bool = false
const Default_ParameterReplayRequest_PerformMonitoring bool = false

func (m *ParameterReplayRequest) GetNameFilter() []*NamedObjectId {
	if m != nil {
		return m.NameFilter
	}
	return nil
}

func (m *ParameterReplayRequest) GetSendRaw() bool {
	if m != nil && m.SendRaw != nil {
		return *m.SendRaw
	}
	return Default_ParameterReplayRequest_SendRaw
}

func (m *ParameterReplayRequest) GetPerformMonitoring() bool {
	if m != nil && m.PerformMonitoring != nil {
		return *m.PerformMonitoring
	}
	return Default_ParameterReplayRequest_PerformMonitoring
}

type PacketReplayRequest struct {
	// No filter, means all packets for which privileges exist, are sent
	NameFilter       []*NamedObjectId `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PacketReplayRequest) Reset()                    { *m = PacketReplayRequest{} }
func (m *PacketReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*PacketReplayRequest) ProtoMessage()               {}
func (*PacketReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PacketReplayRequest) GetNameFilter() []*NamedObjectId {
	if m != nil {
		return m.NameFilter
	}
	return nil
}

type EventReplayRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EventReplayRequest) Reset()                    { *m = EventReplayRequest{} }
func (m *EventReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*EventReplayRequest) ProtoMessage()               {}
func (*EventReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CommandHistoryReplayRequest struct {
	// No filter, means all commands are sent
	NameFilter       []*NamedObjectId `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CommandHistoryReplayRequest) Reset()                    { *m = CommandHistoryReplayRequest{} }
func (m *CommandHistoryReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandHistoryReplayRequest) ProtoMessage()               {}
func (*CommandHistoryReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CommandHistoryReplayRequest) GetNameFilter() []*NamedObjectId {
	if m != nil {
		return m.NameFilter
	}
	return nil
}

type PpReplayRequest struct {
	GroupNameFilter  []string `protobuf:"bytes,1,rep,name=groupNameFilter" json:"groupNameFilter,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PpReplayRequest) Reset()                    { *m = PpReplayRequest{} }
func (m *PpReplayRequest) String() string            { return proto.CompactTextString(m) }
func (*PpReplayRequest) ProtoMessage()               {}
func (*PpReplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PpReplayRequest) GetGroupNameFilter() []string {
	if m != nil {
		return m.GroupNameFilter
	}
	return nil
}

type ReplayStatus struct {
	State            *ReplayStatus_ReplayState `protobuf:"varint,1,req,name=state,enum=yamcs.ReplayStatus_ReplayState" json:"state,omitempty"`
	Request          *ReplayRequest            `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	ErrorMessage     *string                   `protobuf:"bytes,3,opt,name=errorMessage" json:"errorMessage,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ReplayStatus) Reset()                    { *m = ReplayStatus{} }
func (m *ReplayStatus) String() string            { return proto.CompactTextString(m) }
func (*ReplayStatus) ProtoMessage()               {}
func (*ReplayStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReplayStatus) GetState() ReplayStatus_ReplayState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ReplayStatus_INITIALIZATION
}

func (m *ReplayStatus) GetRequest() *ReplayRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReplayStatus) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

type TmPacketData struct {
	ReceptionTime    *int64         `protobuf:"varint,1,req,name=receptionTime" json:"receptionTime,omitempty"`
	Packet           []byte         `protobuf:"bytes,2,req,name=packet" json:"packet,omitempty"`
	GenerationTime   *int64         `protobuf:"varint,3,opt,name=generationTime" json:"generationTime,omitempty"`
	SequenceNumber   *int32         `protobuf:"varint,4,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	Id               *NamedObjectId `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TmPacketData) Reset()                    { *m = TmPacketData{} }
func (m *TmPacketData) String() string            { return proto.CompactTextString(m) }
func (*TmPacketData) ProtoMessage()               {}
func (*TmPacketData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *TmPacketData) GetReceptionTime() int64 {
	if m != nil && m.ReceptionTime != nil {
		return *m.ReceptionTime
	}
	return 0
}

func (m *TmPacketData) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *TmPacketData) GetGenerationTime() int64 {
	if m != nil && m.GenerationTime != nil {
		return *m.GenerationTime
	}
	return 0
}

func (m *TmPacketData) GetSequenceNumber() int32 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

func (m *TmPacketData) GetId() *NamedObjectId {
	if m != nil {
		return m.Id
	}
	return nil
}

type TimeInfo struct {
	CurrentTime      *int64  `protobuf:"varint,1,opt,name=currentTime" json:"currentTime,omitempty"`
	CurrentTimeUTC   *string `protobuf:"bytes,2,opt,name=currentTimeUTC" json:"currentTimeUTC,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TimeInfo) Reset()                    { *m = TimeInfo{} }
func (m *TimeInfo) String() string            { return proto.CompactTextString(m) }
func (*TimeInfo) ProtoMessage()               {}
func (*TimeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TimeInfo) GetCurrentTime() int64 {
	if m != nil && m.CurrentTime != nil {
		return *m.CurrentTime
	}
	return 0
}

func (m *TimeInfo) GetCurrentTimeUTC() string {
	if m != nil && m.CurrentTimeUTC != nil {
		return *m.CurrentTimeUTC
	}
	return ""
}

type Event struct {
	Source                       *string              `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	GenerationTime               *int64               `protobuf:"varint,2,req,name=generationTime" json:"generationTime,omitempty"`
	ReceptionTime                *int64               `protobuf:"varint,3,req,name=receptionTime" json:"receptionTime,omitempty"`
	SeqNumber                    *int32               `protobuf:"varint,4,req,name=seqNumber" json:"seqNumber,omitempty"`
	Type                         *string              `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Message                      *string              `protobuf:"bytes,6,req,name=message" json:"message,omitempty"`
	Severity                     *Event_EventSeverity `protobuf:"varint,7,opt,name=severity,enum=yamcs.Event_EventSeverity,def=0" json:"severity,omitempty"`
	GenerationTimeUTC            *string              `protobuf:"bytes,8,opt,name=generationTimeUTC" json:"generationTimeUTC,omitempty"`
	ReceptionTimeUTC             *string              `protobuf:"bytes,9,opt,name=receptionTimeUTC" json:"receptionTimeUTC,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

var extRange_Event = []proto.ExtensionRange{
	{100, 10000},
}

func (*Event) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Event
}

const Default_Event_Severity Event_EventSeverity = Event_INFO

func (m *Event) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *Event) GetGenerationTime() int64 {
	if m != nil && m.GenerationTime != nil {
		return *m.GenerationTime
	}
	return 0
}

func (m *Event) GetReceptionTime() int64 {
	if m != nil && m.ReceptionTime != nil {
		return *m.ReceptionTime
	}
	return 0
}

func (m *Event) GetSeqNumber() int32 {
	if m != nil && m.SeqNumber != nil {
		return *m.SeqNumber
	}
	return 0
}

func (m *Event) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Event) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Event) GetSeverity() Event_EventSeverity {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return Default_Event_Severity
}

func (m *Event) GetGenerationTimeUTC() string {
	if m != nil && m.GenerationTimeUTC != nil {
		return *m.GenerationTimeUTC
	}
	return ""
}

func (m *Event) GetReceptionTimeUTC() string {
	if m != nil && m.ReceptionTimeUTC != nil {
		return *m.ReceptionTimeUTC
	}
	return ""
}

func init() {
	proto.RegisterType((*StringMessage)(nil), "yamcs.StringMessage")
	proto.RegisterType((*Instant)(nil), "yamcs.Instant")
	proto.RegisterType((*MessagingAddress)(nil), "yamcs.MessagingAddress")
	proto.RegisterType((*Value)(nil), "yamcs.Value")
	proto.RegisterType((*NamedObjectId)(nil), "yamcs.NamedObjectId")
	proto.RegisterType((*NamedObjectList)(nil), "yamcs.NamedObjectList")
	proto.RegisterType((*IndexRequest)(nil), "yamcs.IndexRequest")
	proto.RegisterType((*ArchiveRecord)(nil), "yamcs.ArchiveRecord")
	proto.RegisterType((*IndexResult)(nil), "yamcs.IndexResult")
	proto.RegisterType((*TagRequest)(nil), "yamcs.TagRequest")
	proto.RegisterType((*ArchiveTag)(nil), "yamcs.ArchiveTag")
	proto.RegisterType((*TagResult)(nil), "yamcs.TagResult")
	proto.RegisterType((*UpsertTagRequest)(nil), "yamcs.UpsertTagRequest")
	proto.RegisterType((*DeleteTagRequest)(nil), "yamcs.DeleteTagRequest")
	proto.RegisterType((*ReplaySpeed)(nil), "yamcs.ReplaySpeed")
	proto.RegisterType((*ReplayRequest)(nil), "yamcs.ReplayRequest")
	proto.RegisterType((*ParameterReplayRequest)(nil), "yamcs.ParameterReplayRequest")
	proto.RegisterType((*PacketReplayRequest)(nil), "yamcs.PacketReplayRequest")
	proto.RegisterType((*EventReplayRequest)(nil), "yamcs.EventReplayRequest")
	proto.RegisterType((*CommandHistoryReplayRequest)(nil), "yamcs.CommandHistoryReplayRequest")
	proto.RegisterType((*PpReplayRequest)(nil), "yamcs.PpReplayRequest")
	proto.RegisterType((*ReplayStatus)(nil), "yamcs.ReplayStatus")
	proto.RegisterType((*TmPacketData)(nil), "yamcs.TmPacketData")
	proto.RegisterType((*TimeInfo)(nil), "yamcs.TimeInfo")
	proto.RegisterType((*Event)(nil), "yamcs.Event")
	proto.RegisterEnum("yamcs.EndAction", EndAction_name, EndAction_value)
	proto.RegisterEnum("yamcs.ProtoDataType", ProtoDataType_name, ProtoDataType_value)
	proto.RegisterEnum("yamcs.Value_Type", Value_Type_name, Value_Type_value)
	proto.RegisterEnum("yamcs.ReplaySpeed_ReplaySpeedType", ReplaySpeed_ReplaySpeedType_name, ReplaySpeed_ReplaySpeedType_value)
	proto.RegisterEnum("yamcs.ReplayStatus_ReplayState", ReplayStatus_ReplayState_name, ReplayStatus_ReplayState_value)
	proto.RegisterEnum("yamcs.Event_EventSeverity", Event_EventSeverity_name, Event_EventSeverity_value)
}

func init() { proto.RegisterFile("yamcs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0x5b, 0x6f, 0xdb, 0x46,
	0x16, 0x5e, 0x89, 0x92, 0x2d, 0x1e, 0xdd, 0x28, 0xc6, 0xce, 0xe6, 0x82, 0xdd, 0x78, 0xb9, 0xbb,
	0x85, 0xe3, 0x07, 0x37, 0x55, 0xd2, 0x04, 0x70, 0x51, 0x14, 0xb4, 0x44, 0xdb, 0x44, 0x24, 0x4a,
	0xa1, 0xa8, 0xd4, 0xe9, 0x43, 0x05, 0x5a, 0x1c, 0xab, 0x6c, 0xc5, 0x4b, 0x48, 0x2a, 0xa9, 0x81,
	0xbe, 0xe4, 0xa9, 0x40, 0xdf, 0xfa, 0xdc, 0xdf, 0xd0, 0x1f, 0xd0, 0xbf, 0xd2, 0xfe, 0x99, 0x9e,
	0x99, 0x21, 0x55, 0xd2, 0x97, 0x20, 0xe8, 0x8b, 0x3d, 0xfc, 0x66, 0xce, 0x99, 0x73, 0x9b, 0xef,
	0x1c, 0x41, 0xfd, 0xc2, 0xf6, 0xe6, 0xf1, 0x7e, 0x18, 0x05, 0x49, 0x20, 0x57, 0xd9, 0x87, 0xb2,
	0x03, 0xcd, 0x49, 0x12, 0xb9, 0xfe, 0x62, 0x48, 0xe2, 0xd8, 0x5e, 0x10, 0xb9, 0x0d, 0x9b, 0x1e,
	0x5f, 0xde, 0x29, 0xed, 0x94, 0x77, 0x45, 0xe5, 0x1e, 0x6c, 0xea, 0x7e, 0x9c, 0xd8, 0x7e, 0x42,
	0xf7, 0x5c, 0xbe, 0x64, 0x7b, 0x82, 0xf2, 0x5f, 0x90, 0xb8, 0x1c, 0x2a, 0x50, 0x1d, 0x27, 0xc2,
	0x35, 0x3d, 0x64, 0xf3, 0x65, 0xaa, 0xe0, 0x9d, 0x00, 0xd5, 0x97, 0xf6, 0x72, 0x45, 0xe4, 0x07,
	0x50, 0x49, 0x2e, 0x42, 0xae, 0xb8, 0xd5, 0xed, 0xec, 0x73, 0x7b, 0xd8, 0xde, 0xbe, 0x85, 0x1b,
	0xb2, 0x0c, 0x70, 0xbe, 0x0c, 0xec, 0x84, 0x41, 0x77, 0xca, 0x3b, 0xa5, 0xdd, 0xb2, 0x7c, 0x0b,
	0xea, 0x4e, 0xb0, 0x3a, 0x5b, 0x12, 0x0e, 0x0a, 0x08, 0x96, 0x28, 0x18, 0xbb, 0x7e, 0xf2, 0xb8,
	0xcb, 0xc1, 0x0a, 0x82, 0x1d, 0x0a, 0xae, 0x72, 0x60, 0x15, 0xc1, 0x26, 0x05, 0xcf, 0x5c, 0xdf,
	0x8e, 0x2e, 0x38, 0xb8, 0x81, 0x60, 0x83, 0x89, 0x33, 0xaf, 0x39, 0xb8, 0x89, 0xa0, 0x28, 0xdf,
	0x86, 0x56, 0xe2, 0xa2, 0xef, 0x89, 0xed, 0x85, 0x1c, 0xaf, 0x21, 0x2e, 0x64, 0x6a, 0x9f, 0x3e,
	0xe1, 0xa0, 0x88, 0x60, 0x25, 0x33, 0x20, 0x03, 0x01, 0x41, 0x59, 0xde, 0x82, 0xc6, 0x59, 0x10,
	0x2c, 0x89, 0xed, 0x73, 0xb4, 0x8e, 0x68, 0x4d, 0x79, 0x57, 0x82, 0x0a, 0xf3, 0x4e, 0x84, 0xea,
	0xd1, 0x60, 0xa4, 0x5a, 0xd2, 0x3f, 0xd0, 0xcf, 0x8d, 0xfe, 0x68, 0x7a, 0x38, 0xd0, 0xa4, 0x12,
	0x5d, 0x4f, 0x75, 0xc3, 0x7a, 0xdc, 0x95, 0xca, 0x74, 0x3d, 0xe1, 0x6b, 0x81, 0xae, 0x0f, 0x75,
	0x43, 0x35, 0x5f, 0x49, 0x15, 0x86, 0x5b, 0xa6, 0x6e, 0x1c, 0x4b, 0x55, 0xb9, 0x09, 0xa2, 0xa5,
	0x0f, 0xb5, 0x89, 0xa5, 0x0e, 0xc7, 0xd2, 0x46, 0x26, 0xfe, 0xf4, 0x89, 0xb4, 0x99, 0x89, 0xe3,
	0xba, 0x26, 0xd7, 0x61, 0xf3, 0x70, 0x34, 0x1a, 0x68, 0xaa, 0x21, 0x89, 0xca, 0x23, 0x68, 0x1a,
	0xb6, 0x47, 0x9c, 0xd1, 0xd9, 0xb7, 0x64, 0x9e, 0xe8, 0x8e, 0xdc, 0x80, 0x8a, 0x8f, 0x00, 0x4f,
	0x91, 0xdc, 0x01, 0x91, 0x7e, 0xc5, 0xa1, 0x3d, 0xe7, 0x61, 0x17, 0x95, 0x4f, 0xa1, 0x9d, 0x93,
	0x18, 0xb8, 0x71, 0x22, 0x2b, 0x50, 0x59, 0xe2, 0x7f, 0x94, 0x11, 0x76, 0xeb, 0xdd, 0xad, 0x34,
	0x7d, 0x05, 0xbd, 0xca, 0xaf, 0x02, 0x34, 0x74, 0xdf, 0x21, 0xdf, 0x9b, 0xe4, 0xf5, 0x0a, 0x63,
	0x29, 0x4b, 0x50, 0xe3, 0x35, 0x33, 0xcf, 0x2e, 0x6b, 0x42, 0x15, 0xbf, 0xa3, 0x84, 0x5d, 0x24,
	0x50, 0x4b, 0xe2, 0x24, 0x08, 0x59, 0x62, 0x05, 0x7a, 0x7c, 0x95, 0xcc, 0x27, 0x6c, 0xbf, 0xc5,
	0xd2, 0x82, 0xf5, 0xc4, 0x10, 0x3c, 0xd2, 0x66, 0xc0, 0x1d, 0x90, 0x1c, 0x72, 0x6e, 0xaf, 0x96,
	0x89, 0xb1, 0xb6, 0xb9, 0x92, 0xee, 0x88, 0x31, 0xf1, 0x1d, 0x75, 0xb9, 0xb4, 0x3c, 0x96, 0xfe,
	0xda, 0x41, 0xf5, 0xdc, 0x5e, 0xc6, 0x44, 0xfe, 0x08, 0x6a, 0x89, 0x37, 0xb6, 0xe7, 0xdf, 0x91,
	0x04, 0x4b, 0xe0, 0x46, 0xf3, 0x73, 0x1a, 0xc6, 0x21, 0x2b, 0x8b, 0xb5, 0x86, 0xff, 0xc3, 0x66,
	0x18, 0x1e, 0x47, 0xc1, 0x2a, 0xc4, 0xb2, 0xb8, 0x59, 0xc1, 0xff, 0x60, 0x9b, 0x2a, 0xe8, 0x05,
	0x5e, 0xb8, 0x24, 0x09, 0xf1, 0xf1, 0x19, 0xb0, 0x70, 0xb0, 0xb2, 0x59, 0x2b, 0xbb, 0x0b, 0x90,
	0x5e, 0xd3, 0xf3, 0x1c, 0x56, 0x3c, 0xf9, 0x7b, 0xe6, 0x9e, 0x43, 0x95, 0x62, 0xf9, 0xdc, 0x7c,
	0xcf, 0x7d, 0x68, 0xa4, 0x1a, 0xb4, 0x37, 0x04, 0xdf, 0x63, 0x23, 0xaf, 0xe3, 0x21, 0xd4, 0x09,
	0x45, 0x27, 0xc1, 0x2a, 0xc2, 0xe0, 0x34, 0xdf, 0x93, 0x2f, 0x17, 0x9a, 0x6a, 0x34, 0xff, 0xc6,
	0x7d, 0x43, 0x4c, 0x32, 0x0f, 0x22, 0x47, 0xde, 0x81, 0xb2, 0xeb, 0xb0, 0x4c, 0xdd, 0x74, 0x35,
	0xe6, 0xef, 0xdc, 0x8d, 0x62, 0x9a, 0xbf, 0x32, 0xcf, 0xdf, 0xd2, 0xc6, 0x2f, 0x81, 0x7d, 0xd5,
	0x41, 0xf0, 0x57, 0x1e, 0xe6, 0xa3, 0xbc, 0x5b, 0xa5, 0x5b, 0xae, 0x7f, 0x1e, 0xb0, 0x54, 0x88,
	0xca, 0x02, 0xea, 0x69, 0x65, 0xc4, 0x98, 0xbb, 0x6b, 0x0a, 0x03, 0x5d, 0x8f, 0x98, 0x11, 0x31,
	0xaa, 0xce, 0x9b, 0x5c, 0xb4, 0xb0, 0x91, 0xb2, 0x88, 0xc0, 0x72, 0x8e, 0xa5, 0x9b, 0xd8, 0xc8,
	0x0e, 0x2c, 0x62, 0xac, 0x0c, 0x94, 0xcf, 0x00, 0x2c, 0x7b, 0xf1, 0xf7, 0x0a, 0x10, 0xad, 0x84,
	0xf4, 0x3a, 0xd4, 0x81, 0x0f, 0x8a, 0x47, 0xa3, 0xc4, 0xbd, 0x61, 0x4f, 0xa6, 0x5c, 0x54, 0x22,
	0x14, 0x94, 0x54, 0x32, 0xca, 0x70, 0x48, 0x3c, 0x8f, 0xdc, 0x30, 0x71, 0x03, 0x9f, 0xfb, 0x4f,
	0x25, 0xe6, 0xc1, 0x32, 0x88, 0x18, 0x07, 0x89, 0xca, 0xe7, 0xf8, 0x8c, 0xa9, 0x95, 0x37, 0x04,
	0xe3, 0xdf, 0x20, 0x24, 0xf6, 0x22, 0x0d, 0x44, 0xa7, 0x18, 0x08, 0x94, 0x53, 0x4e, 0x41, 0x9a,
	0x86, 0x31, 0x89, 0x92, 0x9c, 0xab, 0xff, 0x81, 0x8d, 0x60, 0xe9, 0x20, 0xc0, 0x2c, 0xbe, 0x4e,
	0x8c, 0x1e, 0xf1, 0xc9, 0x5b, 0x8b, 0x69, 0x2e, 0x5f, 0xaf, 0xb9, 0x0b, 0x52, 0x9f, 0xd0, 0xe2,
	0xcd, 0x69, 0x4e, 0xad, 0x11, 0x6e, 0x92, 0xf9, 0xa9, 0x04, 0x75, 0x93, 0x84, 0x4b, 0xfb, 0x62,
	0x12, 0x12, 0xe2, 0xc8, 0x8f, 0x0a, 0x4c, 0xaf, 0xa4, 0x02, 0xb9, 0x13, 0xf9, 0x35, 0x23, 0x47,
	0x8c, 0x4e, 0x68, 0x47, 0xb6, 0xc7, 0x59, 0x5f, 0x39, 0x80, 0xf6, 0xe5, 0x13, 0x35, 0xa8, 0xa8,
	0x47, 0xea, 0x18, 0x19, 0xb3, 0x0d, 0xf5, 0x23, 0xfd, 0x54, 0xeb, 0xcf, 0xfa, 0xda, 0x40, 0x7d,
	0x85, 0xb4, 0xd9, 0x80, 0x9a, 0xa9, 0xa9, 0x03, 0x4a, 0x8b, 0x92, 0xa0, 0xfc, 0x26, 0x40, 0x93,
	0x0b, 0x67, 0xe6, 0xaf, 0x93, 0x55, 0x2a, 0x24, 0xab, 0x7c, 0x85, 0x72, 0x9a, 0x97, 0x29, 0x87,
	0x73, 0xd0, 0x43, 0x10, 0xe9, 0x63, 0x9b, 0xb3, 0x6c, 0xd2, 0x84, 0xb7, 0xba, 0x52, 0xea, 0x93,
	0x96, 0xe1, 0x07, 0x95, 0x17, 0x53, 0xdd, 0xc2, 0x00, 0x57, 0x63, 0x6a, 0x32, 0xab, 0x84, 0x7a,
	0x57, 0xbe, 0xea, 0x3a, 0x55, 0x1f, 0xe1, 0xfb, 0x8c, 0x62, 0xc2, 0x18, 0xad, 0x26, 0x3f, 0x03,
	0x89, 0xf9, 0x8e, 0x31, 0x8f, 0x52, 0x93, 0x59, 0xef, 0xa9, 0x77, 0xff, 0x95, 0x8a, 0x8f, 0xff,
	0xda, 0xce, 0xfb, 0xf5, 0x09, 0x34, 0x43, 0x46, 0x6a, 0x99, 0x94, 0xc8, 0xa4, 0xee, 0xad, 0xa5,
	0xf8, 0x5e, 0x5e, 0xe4, 0x63, 0x68, 0x30, 0x6e, 0xc8, 0x24, 0x80, 0x49, 0xdc, 0xcd, 0xbc, 0xe1,
	0x5b, 0x79, 0x01, 0x15, 0xb6, 0xe7, 0x81, 0xe7, 0xd9, 0xbe, 0x73, 0x82, 0xe4, 0x1f, 0x44, 0xd9,
	0x06, 0xeb, 0x6e, 0xf5, 0x75, 0x6e, 0x7b, 0x97, 0xce, 0xe4, 0x55, 0x60, 0xf8, 0xc2, 0x30, 0x13,
	0x6b, 0x30, 0xb1, 0xdb, 0x99, 0x89, 0x61, 0xe1, 0xa8, 0xf2, 0x03, 0xdc, 0xbe, 0xc1, 0xd7, 0x5d,
	0x00, 0xfa, 0xfc, 0x8e, 0xdc, 0x25, 0x6e, 0xbd, 0xaf, 0x07, 0x61, 0x23, 0xdf, 0xa4, 0xdc, 0x68,
	0xda, 0x6f, 0x59, 0x86, 0xd7, 0xb4, 0xb8, 0x03, 0x9d, 0x90, 0x44, 0xe7, 0x41, 0xe4, 0x0d, 0x03,
	0xdf, 0x45, 0x33, 0x71, 0x00, 0x60, 0xd9, 0xcc, 0x4e, 0x28, 0x5f, 0xc0, 0xad, 0xeb, 0x62, 0xf6,
	0xc1, 0x57, 0x2b, 0x5b, 0x20, 0x5f, 0x0d, 0xa1, 0x72, 0x0c, 0xf7, 0xdf, 0x17, 0x9e, 0x0f, 0x57,
	0xbf, 0x07, 0xed, 0x4b, 0x01, 0x93, 0xff, 0x09, 0xed, 0x05, 0xed, 0x4a, 0x46, 0x51, 0x83, 0xa8,
	0xfc, 0x51, 0x82, 0x46, 0x5a, 0x75, 0x89, 0x9d, 0xac, 0x62, 0x79, 0x9f, 0x3d, 0x82, 0x24, 0x7b,
	0x94, 0x0f, 0x8a, 0x95, 0xc9, 0xce, 0xe4, 0x3e, 0x08, 0xa7, 0x63, 0x9e, 0xb3, 0x32, 0xcb, 0xd9,
	0x56, 0x41, 0x22, 0x33, 0x00, 0x87, 0x1e, 0x12, 0x45, 0x41, 0x94, 0x0e, 0x90, 0x9c, 0x96, 0x95,
	0xaf, 0xd7, 0x7c, 0xc0, 0x74, 0xc9, 0xd0, 0xd2, 0x0d, 0xdd, 0xd2, 0xd5, 0x81, 0xfe, 0x95, 0x6a,
	0xe9, 0x23, 0x03, 0x67, 0x20, 0x1c, 0x50, 0xcc, 0xa9, 0x61, 0xd0, 0xa1, 0xa6, 0x44, 0x3f, 0x26,
	0xd6, 0x68, 0x3c, 0xd6, 0xfa, 0xf8, 0x9c, 0x71, 0x50, 0xd2, 0x4c, 0x73, 0x64, 0xf2, 0x21, 0x68,
	0xac, 0x4e, 0x27, 0x08, 0xb3, 0x21, 0xa8, 0x37, 0x18, 0xd1, 0x75, 0x55, 0xf9, 0x11, 0xbd, 0xb3,
	0xd2, 0x8e, 0xde, 0xb7, 0x13, 0x5b, 0xde, 0x86, 0x26, 0x36, 0x0f, 0xc2, 0x08, 0xd7, 0x72, 0xd3,
	0xc9, 0x46, 0x90, 0x5b, 0xb0, 0xc1, 0x5f, 0x08, 0xe3, 0xbb, 0x06, 0x1d, 0xf2, 0x16, 0xd8, 0x95,
	0x23, 0x7b, 0x7d, 0x8e, 0xf3, 0x37, 0xe2, 0x31, 0x75, 0x08, 0x09, 0xd8, 0x58, 0x79, 0x67, 0x18,
	0xc5, 0x0a, 0x23, 0x7d, 0xde, 0x0e, 0xab, 0x05, 0xff, 0x8b, 0x39, 0x79, 0x06, 0x35, 0xaa, 0x47,
	0xc7, 0x46, 0x47, 0x79, 0x7f, 0xbe, 0x8a, 0x22, 0x2c, 0x80, 0xd4, 0x84, 0x54, 0x75, 0x0e, 0x9c,
	0x5a, 0xbd, 0x74, 0xc2, 0xfa, 0xa5, 0x8c, 0x6e, 0xd2, 0x62, 0xa1, 0x46, 0xc6, 0xbc, 0x55, 0x73,
	0xee, 0xbf, 0x6a, 0x24, 0x6f, 0xb5, 0x57, 0x7c, 0xe4, 0x3d, 0xb7, 0x43, 0x87, 0x96, 0xd7, 0x6b,
	0xb3, 0xd3, 0xce, 0xcb, 0xf8, 0xb7, 0x9a, 0xf1, 0x59, 0x36, 0xd3, 0x6f, 0xb0, 0x0b, 0xba, 0x50,
	0x8b, 0x29, 0x03, 0xb9, 0xc9, 0x05, 0x9b, 0x72, 0x5a, 0x6b, 0xca, 0x60, 0x06, 0xf1, 0xbf, 0x93,
	0xf4, 0xc4, 0x41, 0x45, 0x37, 0x8e, 0x46, 0x38, 0xb3, 0x74, 0x8a, 0x46, 0x51, 0x4f, 0x6a, 0xd9,
	0x44, 0x56, 0xb0, 0x8b, 0xee, 0x88, 0xcc, 0x47, 0x24, 0xa8, 0x82, 0x2e, 0x4a, 0xe2, 0x54, 0x1b,
	0x4f, 0xff, 0x97, 0xaa, 0x99, 0xa6, 0x7f, 0x9d, 0xf1, 0xf2, 0x5e, 0xb5, 0xe6, 0x48, 0x3f, 0x1b,
	0x7b, 0xc8, 0x19, 0x6b, 0x6a, 0xa5, 0x52, 0x83, 0xd1, 0x88, 0x52, 0x3f, 0xae, 0x28, 0xcd, 0x62,
	0x91, 0xe0, 0x8a, 0x56, 0x8c, 0x24, 0xec, 0xfd, 0x5e, 0x86, 0xe6, 0x98, 0xfe, 0xa8, 0xa1, 0x85,
	0xc0, 0x5a, 0x05, 0xf6, 0x83, 0xbe, 0x35, 0xe3, 0x1a, 0x4b, 0x48, 0xf0, 0x0d, 0x1c, 0x96, 0x2d,
	0x6d, 0xd6, 0x3b, 0x51, 0x8d, 0x63, 0x0d, 0x65, 0xe9, 0x08, 0x3d, 0x9c, 0x8d, 0xd5, 0xde, 0x73,
	0xcd, 0xc2, 0x22, 0xdb, 0x80, 0xf2, 0x78, 0x8c, 0x05, 0x46, 0xad, 0x78, 0xa9, 0x19, 0x16, 0x0e,
	0xd9, 0x1d, 0x9c, 0x8b, 0xcc, 0xde, 0x89, 0xfe, 0x52, 0x9b, 0xe9, 0x46, 0x5f, 0x3b, 0xc5, 0x41,
	0x1b, 0xbb, 0x4e, 0x06, 0x59, 0xea, 0x31, 0x4e, 0xdb, 0xa8, 0x65, 0xac, 0x9a, 0xea, 0x50, 0xb3,
	0x34, 0x13, 0x07, 0x6e, 0xdc, 0xef, 0x0d, 0xfb, 0xb3, 0x13, 0x1d, 0xcd, 0xc2, 0xa1, 0x5d, 0xa4,
	0x45, 0x3f, 0x36, 0x47, 0x3d, 0x6d, 0x32, 0x19, 0x99, 0x33, 0xe6, 0x35, 0xb0, 0x43, 0x03, 0x1d,
	0xef, 0xe0, 0x40, 0x1d, 0xc3, 0xba, 0x9d, 0x1e, 0xc2, 0x48, 0xcc, 0xa8, 0x9d, 0x28, 0xaf, 0xf7,
	0x26, 0x52, 0x83, 0x9e, 0xc5, 0xa1, 0x5f, 0x53, 0x87, 0xb3, 0xbe, 0x6a, 0xa9, 0x52, 0x13, 0xeb,
	0x04, 0xd4, 0x81, 0x6a, 0xa6, 0xdf, 0xad, 0xec, 0x97, 0x00, 0x57, 0xd5, 0xa6, 0xdb, 0x03, 0xdd,
	0x78, 0x3e, 0xe3, 0x3e, 0x48, 0x58, 0x46, 0x72, 0x6f, 0x34, 0x1c, 0xaa, 0x46, 0x7f, 0xf6, 0x62,
	0xaa, 0x4d, 0xd3, 0x73, 0x1d, 0xa4, 0x8c, 0x5b, 0x45, 0x9c, 0x0b, 0xc8, 0xd4, 0x60, 0xed, 0xd4,
	0xd2, 0x8c, 0x09, 0x3e, 0x50, 0x7e, 0x87, 0x73, 0x88, 0x8c, 0x16, 0x44, 0x8b, 0xfd, 0xdc, 0x4f,
	0xc7, 0xb3, 0xd5, 0xf9, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x78, 0x27, 0x12, 0x4b, 0x0e,
	0x00, 0x00,
}
